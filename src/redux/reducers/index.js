import { combineReducers } from "redux";
import {
  notifsCountReducer,
  notifsGetReducer,
  getAssetsReducer,
} from "./dashboard.reducer";
import {
  invoiceEditReducer,
  invoicesGetReducer,
  invoiceGetReducer,
  createInvoicePdfReducer,
  downloadInvoicePdfReducer,
  applyCouponOnInvoiceReducer,
  applyPointsOnInvoiceReducer,
  invoiceStatusAfterPaymentReducer,
  notifyInvoicePaymentReducer,
} from "./invoice.reducer";
import { commentAddReducer, commentsGetReducer } from "./comment.Reducer";
import {
  dashboardReducer,
  historiesGetReducer,
  logAddReducer,
  projectAddReducer,
  projectEditReducer,
  archiveProjectReducer,
  projectGetReducer,
  projectsGetReducer,
  getProjectProdsReducer,
  viewCustomerProjectListtReducer,
  viewSingleCustomerProjectListtReducer,
  completeProjectReducer,
} from "./project.reducer";
import {
  quoteAddReducer,
  quoteEditReducer,
  quotesGetReducer,
  quoteGetReducer,
  addQuoteTaxReducer,
  updateQuoteTaxReducer,
  updateProposalTextReducer,
  deleteQuoteTaxReducer,
  quoteItemEditReducer,
  quoteDeleteItemReducer,
  unAddedQuoteItemReducer,
  addQuoteItemReducer,
  sendQuoteReducer,
  acceptQuoteReducer,
  rejectQuoteReducer,
  updateQuoteDiscountReducer,
  createQuotePdfReducer,
  downloadQuotePdfReducer,
  updateLicenseAgreementReducer,
  getLicenseAgreementReducer,
} from "./quote.reducer";
import {
  subscriptionsGetReducer,
  subscriptionAddReducer,
  subscriptionGetReducer,
  subscriptionEditReducer,
  subscriptiondeleteReducer,
  addSubscriptionsCustomers,
  getSubscriptionsCustomers,
  getUserPrivateSubscriptionPlans,
} from "./subscriptionPlan.reducer";
import { promisedReducer } from "../utils/reducer";
import {
  loginReducer,
  profileEditReducer,
  userProfileEditReducer,
  registerReducer,
  resetPasswordReducer,
  sendLinkReducer,
  setPasswordReducer,
  userDeleteReducer,
  userEditReducer,
  usersListReducer,
  changePassword,
  adminGetUsersReducer,
  addUserDomainNamesReducer,
  getUserDomainNamesReducer,
  validateResetTokenReducer,
  getSingleUserReducer,
} from "./user.reducer";
import {
  ADD_NEW_PRODUCT,
  ADD_PROJECT_PROD,
  DELETE_ATTR_IMAGE,
  DELETE_PRODUCT,
  GET_ANALYTICS,
  GET_COUNTRIES,
  GET_PRODUCT,
  GET_SINGLE_PRODUCT,
  GET_PRODUCTS,
  GET_PRODUCT_IMAGES,
  GET_PROJECT_PROD,
  REMOVE_PROFILE,
  UPDATE_ATTRIBUTES,
  UPDATE_PRODUCT,
  UPLOAD_PRODUCT_IMAGES,
  UPLOAD_PROFILE,
  DUPLICATE_PRODUCT,
  GET_DUPLICATES,
  GET_DUPLICATES_ANALYTICS,
  GET_SINGLE_ANALYTIC,
  ASSET_ICON,
  GET_CLIENTS_PRODUCTS,
CHANGE_PRODUCT_STATUS
} from "redux/actions/actionTypes";
import { logsReducer, addLogsReducer } from "./logs.reducer";
import { attrImageReducer, qrCodeGeneratorReducer } from "./file.reducer";
import {
  subscribeReducer,
  currentSubscriptionReducer,
  subscribeOrChangeSubscriptionReducer,
  viewCustomersSubscriptionsReducer,
} from "./subscription.reducer";
import { getSingleAnalyticReducer } from "./analytic.reducer";
import {
  createCurrencyReducer,
  getAllCurrencyReducer,
  countCurrencyReducer,
  getSingleCurrencyReducer,
  updateCurrencyReducer,
  getCurrencyByUserReducer,
} from "./currency.reducer";
import { employeesGetReducer } from "./employee.reducer";
import {
  loyaltyPointsGetReducer,
  loyaltyPointsAddReducer,
  singleLoyaltyPointGetReducer,
  updateLoyaltyPointsGetReducer,
} from "./loyaltyPoints.reducer";
import {
  createCouponReducer,
  getAllCouponsReducer,
  getCouponReducer,
  updateCouponReducer,
  getCouponCustomersReducer,
  addCouponOnCustomerReducer,
  deleteCouponOnCustomerReducer,
  getClientCouponsReducer,
} from "./coupons";
import {
  sessionsByUserReducer,
  sessionReducer,
  selectedSessionReducer,
} from "./session.reducer";
import {
  generatePointsReducer,
  getSessionOnSuccessReducer,
  notifyPaymentReducer,
  paymentSessionReducer,
} from "./payments";
import {
  conversationAddReducer,
  conversationGetReducer,
} from "./conversation.Reducer";

import {
  addItemReducer,
  getItemsReducer,
  updateItemReducer,
} from "./item.reducer";

export default combineReducers({
  login: loginReducer,
  register: registerReducer,
  userList: usersListReducer,
  adminGetUsers: adminGetUsersReducer,
  passwordSet: setPasswordReducer,
  validateResetToken: validateResetTokenReducer,
  addUserDomainNames: addUserDomainNamesReducer,
  getUserDomainNames: getUserDomainNamesReducer,
  projectAdd: projectAddReducer,
  projectsGet: projectsGetReducer,
  projectProductsGet: getProjectProdsReducer,
  projectEdit: projectEditReducer,
  commpleteProject: completeProjectReducer,
  archiveProject: archiveProjectReducer,
  CustomerProjectList: viewCustomerProjectListtReducer,
  SingleCustomerProjectList: viewSingleCustomerProjectListtReducer,
  quoteAdd: quoteAddReducer,
  commentAdd: commentAddReducer,
  commentGet: commentsGetReducer,
  conversationAdd: conversationAddReducer,
  conversationGet: conversationGetReducer,
  quotesGet: quotesGetReducer,
  quoteGet: quoteGetReducer,
  quoteEdit: quoteEditReducer,
  quoteAddItem: addQuoteItemReducer,
  quoteItemEdit: quoteItemEditReducer,
  quoteUnAddItem: unAddedQuoteItemReducer,
  quoteItemDelete: quoteDeleteItemReducer,
  addQuoteTax: addQuoteTaxReducer,
  updateQuoteTax: updateQuoteTaxReducer,
  updateProposalText: updateProposalTextReducer,
  updateLicenseAgreement: updateLicenseAgreementReducer,
  getLicenseAgreement: getLicenseAgreementReducer,
  deleteQuoteTax: deleteQuoteTaxReducer,
  sendQuote: sendQuoteReducer,
  acceptQuote: acceptQuoteReducer,
  rejectQuote: rejectQuoteReducer,
  updateQuoteDiscount: updateQuoteDiscountReducer,
  createQuotePdf: createQuotePdfReducer,
  downloadQuotePdf: downloadQuotePdfReducer,
  invoicesGet: invoicesGetReducer,
  invoiceGet: invoiceGetReducer,
  invoiceEdit: invoiceEditReducer,
  invoiceStatusAfterPayment: invoiceStatusAfterPaymentReducer,
  notifyInvoicePayment: notifyInvoicePaymentReducer,
  createInvoicePdf: createInvoicePdfReducer,
  downloadInvoicePdf: downloadInvoicePdfReducer,
  applyCouponOnInvoice: applyCouponOnInvoiceReducer,
  applyPointsOnInvoice: applyPointsOnInvoiceReducer,
  subscriptionsGet: subscriptionsGetReducer,
  subscriptionGet: subscriptionGetReducer,
  subscriptionsAdd: subscriptionAddReducer,
  subscriptionEdit: subscriptionEditReducer,
  changeSubscription: subscribeOrChangeSubscriptionReducer,
  subscripionDelete: subscriptiondeleteReducer,
  allSubscriptions: getUserPrivateSubscriptionPlans,
  subscriptionCustomersGet: getSubscriptionsCustomers,
  subscriptionCustomersAdd: addSubscriptionsCustomers,
  dashboard: dashboardReducer,
  userEdit: userEditReducer,
  userRm: userDeleteReducer,
  profileEdit: profileEditReducer,
  userProfileEdit: userProfileEditReducer,
  linkSend: sendLinkReducer,
  pwdReset: resetPasswordReducer,
  historiesGet: historiesGetReducer,
  notifsGet: notifsGetReducer,
  notifsCount: notifsCountReducer,
  getAssets: getAssetsReducer,
  projectGet: projectGetReducer,
  logAdd: logAddReducer,
  assetLogs: logsReducer,
  addLogsReducer: addLogsReducer,
  subscribe: subscribeReducer,
  currentSubscription: currentSubscriptionReducer,
  viewCustomersSubscription: viewCustomersSubscriptionsReducer,
  createCurrency: createCurrencyReducer,
  getCurrencies: getAllCurrencyReducer,
  getCurrencyByUser: getCurrencyByUserReducer,
  countCurrency: countCurrencyReducer,
  getSingleCurrency: getSingleCurrencyReducer,
  getSingleAnalytic: getSingleAnalyticReducer,
  updateCurrency: updateCurrencyReducer,
  addItem: addItemReducer,
  getItems: getItemsReducer,
  updateItem: updateItemReducer,
  createCoupon: createCouponReducer,
  getAllCoupons: getAllCouponsReducer,
  getCoupon: getCouponReducer,
  getCouponCustomers: getCouponCustomersReducer,
  addCouponOnCustomer: addCouponOnCustomerReducer,
  deleteCouponOnCustomer: deleteCouponOnCustomerReducer,
  updateCoupon: updateCouponReducer,
  clientCoupon: getClientCouponsReducer,
  fileUpload: promisedReducer(UPLOAD_PRODUCT_IMAGES, "filePath", "string"),
  productAdd: promisedReducer(ADD_NEW_PRODUCT, "product", "object"),
  productsGet: promisedReducer(GET_PRODUCTS, "products", "array"),
  clientProductsGet: promisedReducer(GET_CLIENTS_PRODUCTS, "products", "array"),
  productImg: promisedReducer(GET_PRODUCT_IMAGES, "image", "object"),
  productIcon: promisedReducer(ASSET_ICON, "fileName", "string"),
  productEdit: promisedReducer(UPDATE_PRODUCT, "message", "string"),
  productDuplicate: promisedReducer(DUPLICATE_PRODUCT, "product", "object"),
  productDuplicates: promisedReducer(GET_DUPLICATES, "duplicates", "array"),
  changeStatusProduct:promisedReducer(CHANGE_PRODUCT_STATUS,'status','object'),
  productDuplicatesAnalytics: promisedReducer(
    GET_DUPLICATES_ANALYTICS,
    "duplicatesAnalytics",
    "array"
  ),
  attrUpdate: promisedReducer(UPDATE_ATTRIBUTES, "message", "string"),
  productGet: promisedReducer(GET_PRODUCT, "product", "object"),
  singleProductGet: promisedReducer(
    GET_SINGLE_PRODUCT,
    "singleProduct",
    "object"
  ),
  attrImg: attrImageReducer,
  imgAttrDel: promisedReducer(DELETE_ATTR_IMAGE, "deletedFile", "string"),
  projectAddProd: promisedReducer(ADD_PROJECT_PROD, "message", "string", true),
  projectProdsGet: promisedReducer(GET_PROJECT_PROD, "projProds", "array"),
  analyticsGet: promisedReducer(GET_ANALYTICS, "analytics", "array"),
  countriesGet: promisedReducer(GET_COUNTRIES, "fetchedCountries", "array"),
  profileImgAdd: promisedReducer(UPLOAD_PROFILE, "fileName", "string"),
  profileImgRm: promisedReducer(REMOVE_PROFILE, "message", "string"),
  qrGenerate: qrCodeGeneratorReducer,
  productRm: promisedReducer(DELETE_PRODUCT, "message", "string", true),
  changePassword: changePassword,
  employeesGet: employeesGetReducer,
  loyaltyPointsGet: loyaltyPointsGetReducer,
  loyaltyPointsAdd: loyaltyPointsAddReducer,
  updateLoyaltyPoints: updateLoyaltyPointsGetReducer,
  singleLoyaltyPoint: singleLoyaltyPointGetReducer,
  paymentSession: paymentSessionReducer,
  notifyPayment: notifyPaymentReducer,
  sessionOnSuccessPayment: getSessionOnSuccessReducer,
  generatePoints: generatePointsReducer,
  sessionsByUser: sessionsByUserReducer,
  session: sessionReducer,
  selectedSession: selectedSessionReducer,
  getSingleUser: getSingleUserReducer,
});
